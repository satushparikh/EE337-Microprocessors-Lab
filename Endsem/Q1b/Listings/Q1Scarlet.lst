C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE Q1SCARLET
OBJECT MODULE PLACED IN .\Objects\Q1Scarlet.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Q1Scarlet.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\Q1Scarlet.lst) TABS(2) OBJECT(.\Objects\Q1Scarlet.obj)

line level    source

   1          #include <stdio.h>
   2          #include <stdlib.h>
   3          #include <at89c5131.h>
   4          #include "lcd.h"
   5          #define MAX_LCD_CHARS 16 // Maximum characters per line on the LCD
   6          
   7          // unsigned char str_to_pad="EE337";
   8          unsigned char display_msg1[MAX_LCD_CHARS + 1]; //= {0};
   9          unsigned char display_msg2[MAX_LCD_CHARS + 1]; // = {0};
  10          unsigned char number[10] = {0};
  11          unsigned char dt[8] = {0};
  12          
  13          long unsigned int p[2], q[2], r[4];
  14          long unsigned int answer;
  15          long unsigned int time;
  16          long unsigned int param[2];
  17          long unsigned int p1, q1;
  18          void main()
  19          {
  20   1       lcd_init();
  21   1          // lcd_cmd(0x80); // Move cursor to first line
  22   1          // msdelay(4);
  23   1          TMOD = 0x10; // Timer 1 in mod 1
  24   1          TL1 = 0x00;  // Starting Count value
  25   1          TH1 = 0x00;
  26   1          TR1 = 1; // Start bit indicates the counting starts
  27   1          p1 = 9653, q1 = 43801;
  28   1         
  29   1          p[1] = p1 / 10;
  30   1          p[0] = p1 % 10;
  31   1      
  32   1          q[1] = q1 / 10;
  33   1          q[0] = q1 % 10;
  34   1      
  35   1          r[0] = p[0] * q[0];
  36   1          r[1] = p[0]*q[1];
  37   1          r[2] =  p[1]*q[0];
  38   1          r[3] = p[1] * q[1];
  39   1      
  40   1          answer = r[0] + (r[1] + r[2]) * 10 + r[3] * 100;
  41   1          TR1 = 0;
  42   1      
  43   1          param[0] = TL1;
  44   1          param[1] = TH1;
  45   1          time = (param[0] + 256 * param[1]) / 2.0;
  46   1          // time   = ((TL1) & (0x0f) + (TL1) & (0xf0) * 16 + (TH1) & (0x0f) * 253 + (TH1) & (0xf0) * 4096) / 2;
  47   1          //   sprintf(display_msg1,"Prod");
  48   1      
  49   1          number[8] = answer % 10 + '0';
  50   1          answer /= 10;
  51   1      
  52   1          number[7] = answer % 10 + '0';
  53   1          answer /= 10;
  54   1          number[6] = answer % 10 + '0';
C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 2   

  55   1          answer /= 10;
  56   1          number[5] = answer % 10 + '0';
  57   1          answer /= 10;
  58   1          number[4] = answer % 10 + '0';
  59   1          answer /= 10;
  60   1          number[3] = answer % 10 + '0';
  61   1          answer /= 10;
  62   1          number[2] = answer % 10 + '0';
  63   1          answer /= 10;
  64   1          number[1] = answer % 10 + '0';
  65   1          answer /= 10;
  66   1          number[0] = answer % 10 + '0';
  67   1          answer /= 10;
  68   1          number[9] = '\0';
  69   1          // sprintf(display_msg2, "%d", time);
  70   1          display_msg1[0] = 'P';
  71   1          display_msg1[1] = 'r';
  72   1          display_msg1[2] = 'o';
  73   1          display_msg1[3] = 'd';
  74   1          display_msg1[4] = '=';
  75   1          display_msg1[5] = '\0';
  76   1          lcd_cmd(0x80);
  77   1          lcd_write_string(display_msg1);
  78   1          // msdelay(1);
  79   1          lcd_cmd(0x86);
  80   1          lcd_write_string(number);
  81   1          //   lcd_cmd(0xC0);
  82   1          //   lcd_write_string(display_msg2);
  83   1          display_msg2[0] = 'T';
  84   1          display_msg2[1] = 'i';
  85   1          display_msg2[2] = 'm';
  86   1          display_msg2[3] = 'e';
  87   1          display_msg2[4] = '1';
  88   1          display_msg2[5] = '=';
  89   1          display_msg2[6] = '\0';
  90   1          dt[5]='u';
  91   1          dt[6]='s';
  92   1          dt[7]='\0';
  93   1          dt[4]=time%10+'0';
  94   1          time/=10;
  95   1          dt[3]=time%10+'0';
  96   1          time/=10;
  97   1          dt[2]=time%10+'0';
  98   1          time/=10;
  99   1          dt[1]=time%10+'0';
 100   1          time/=10;
 101   1          dt[0]=time%10+'0';
 102   1          time/=10;
 103   1          lcd_cmd(0xc0);
 104   1          lcd_write_string(display_msg2);
 105   1          lcd_cmd(0xc6);
 106   1          lcd_write_string(dt);
 107   1          while (1)
 108   1              ;
 109   1      
 110   1          /*   sprintf(floor_num1,"Floor 1 = 0%d",0);
 111   1        lcd_cmd(0x80);
 112   1        lcd_write_string(floor_num1); */
 113   1      }
 114          /*
 115          unsigned int my_strlen(const unsigned char *str)
 116          {
C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 3   

 117              unsigned int len = 0;
 118              while (str[len] != '\0')
 119              {
 120                  len++;
 121              }
 122              return len;
 123          }
 124          
 125          void center_pad(const unsigned char *str_to_pad, unsigned char lcd_str[MAX_LCD_CHARS + 1], unsigned char p
             -ad_char)
 126          {
 127              size_t len = strlen(str_to_pad);
 128              size_t spaces = MAX_LCD_CHARS - len;
 129              size_t left_spaces = spaces / 2;
 130              size_t right_spaces = spaces - left_spaces;
 131              size_t i;
 132          
 133              // Pad the left side with spaces
 134              for (i = 0; i < left_spaces; i++)
 135              {
 136                  lcd_str[i] = pad_char;
 137              }
 138          
 139              // Copy the input string into the center of the LCD string
 140              for (i = 0; i < len; i++)
 141              {
 142                  lcd_str[left_spaces + i] = str_to_pad[i];
 143              }
 144          
 145              // Pad the right side with spaces
 146              for (i = left_spaces + len; i < MAX_LCD_CHARS; i++)
 147              {
 148                  lcd_str[i] = pad_char;
 149              }
 150          
 151              // Add a null terminator to the end of the string
 152              lcd_str[MAX_LCD_CHARS] = '\0';
 153              return;
 154          } */
 155          /*  center_pad(pad1, display_msg1);
 156           P1 = 0x0F; // no leds should glow while START PROGRAM is being displayed for 5s but making first 4 bits a
             -s input port
 157           lcd_write_string(display_msg1);
 158           msdelay(8000);
 159          
 160           lcd_cmd(0x01);                  // LCD clear
 161           center_pad(pad2, display_msg1); // pads FIRST NUMBER
 162           lcd_write_string(display_msg1);
 163           msdelay(8000);
 164          
 165           input[0] = P1;
 166           input[0] &= 0x0F;
 167          
 168           // turn off all the leds for 1s and make P1 an input port
 169           P1 = 0x0F;
 170           lcd_cmd(0x01);                  // clears the lCd
 171           center_pad(pad3, display_msg1); // padding next input
 172           msdelay(1000);
 173          */
 174          /*
 175             for (it = 1; it <= 4; it++)             // taking next 4 inputs
 176              {                                       // lcd:next input    input[i] on dp0-3     and on leds show in
C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 4   

             -put[i-1]
 177                  P1 = ((input[it - 1] << 4) | 0x0F); // displaying previous input on leds and making first four bit
             -s as an input port
 178                  msdelay(5);                         // not needed but written
 179                  lcd_write_string(display_msg1);
 180                  msdelay(8000);
 181                  input[it] = P1 & 0x0F; // store the input
 182          
 183                  // turn off all the leds for 1s and make P1 an input port
 184                  P1 = 0x0F;
 185                  lcd_cmd(0x01); // clears the led
 186                  msdelay(1000);
 187              }
 188              // display SORTING ON lcd and last input number on the leds
 189              P1 = ((input[4] << 4) | 0x0F);
 190              center_pad(pad4, display_msg1); // displaying  SORTING...
 191              lcd_write_string(display_msg1);
 192              msdelay(8000);
 193          
 194              P1 = 0x0F;     // MAKING P1 4 BIT INPUT PORT AND KEEPING ALL LEDS OFF
 195              lcd_cmd(0x01); // clears the lCd
 196              msdelay(1000);
 197          
 198              // SORTING THE FIVE INPUTS IN ASCENDING ORDER
 199              bubble_sort(input, 5);
 200          
 201              // lcd is already cleared and cursor is at position[0][0]
 202              //  show  SORTING /N COMPLETED
 203              lcd_cmd(0x80); // Move cursor to first line
 204              msdelay(4);
 205              center_pad(pad5, display_msg1);
 206              lcd_write_string(display_msg1);
 207          
 208              lcd_cmd(0xC0); // Move cursor to 2nd line of LCD
 209              msdelay(4);
 210              center_pad(pad6, display_msg2);
 211              lcd_write_string(display_msg2);
 212          
 213              //     Sort the five numbers in ascending order and display it on LEDs, each for 5
 214              // seconds with a pause of 1 second with all LEDs off.
 215              for (it = 0; it < 4; it++)
 216              {
 217                  // P1 = (input[it] & 0xf0);
 218                  P1 = (input[it] << 4);
 219                  msdelay(4000);
 220          
 221                  P1 = 0x00;
 222                  msdelay(1000);
 223              }
 224              //  After displaying the sorted array, give a pause of 1 second with all LEDs off.
 225              // Then turn on all the LEDs for 5 seconds where you have to take the input to be searched and display
             - ”NUMBER TO BE” in the first row and
 226              // ”SEARCHED” in the second row of the LCD.
 227              P1 = 0xFF;     // turning on all leds and making port 1 input also
 228              lcd_cmd(0x01); // clears the led
 229              lcd_cmd(0x80); // Move cursor to first line
 230              msdelay(4);
 231              center_pad(pad7, display_msg1);// pad7[] = "NUMBER TO BE";
 232              lcd_write_string(display_msg1);
 233          
 234              lcd_cmd(0xC0); // Move cursor to 2nd line of LCD
 235              msdelay(4);
C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 5   

 236              center_pad(pad8, display_msg2);
 237              lcd_write_string(display_msg2);
 238              //turn on all leds when message is showing number to be searched
 239              P1=0xFF;
 240              msdelay(8000);
 241              // pad7,pad 8 number to be \n searched
 242              search = P1 & 0x0F;//number which is to be searched
 243              // Give a pause of 1 second by clearing both LEDs and LCD.
 244              msdelay(4);
 245              lcd_cmd(0x01); // clears the led
 246              P1 = 0x00;
 247          
 248              //      Perform any search algorithm on the sorted array of five numbers.
 249              // • If the number is present in the array, display the index at which the number
 250              // is present (assume array index starts from 1) on the LEDs and display ”THE
 251              // INDEX IS” on LCD.
 252              // • If the number is absent, ON all the LEDs and display ”NUMBER” in the first
 253              // row and ”NOT FOUND” in the second row of the LCD.
 254              for (it = 0; it < 5; it++)
 255              {
 256                  if (search == input[it])
 257                  {
 258                      index_at_which_present = it + 1;
 259                      break;
 260                  }
 261              }
 262          
 263              // unsigned char index_at_which_present=0xf0;
 264              if (index_at_which_present == 0xf0) // if number not present turn on all leds with lcd saying NUMBER \
             -n NOT FOUND
 265              {
 266                  P1 = index_at_which_present;
 267                  lcd_cmd(0x80); // Move cursor to first line
 268                  msdelay(4);
 269                  center_pad(pad10, display_msg1);
 270                  lcd_write_string(display_msg1);
 271          
 272                  lcd_cmd(0xC0); // Move cursor to 2nd line of LCD
 273                  msdelay(4);
 274                  center_pad(pad11, display_msg2);
 275                  lcd_write_string(display_msg2);
 276              }
 277              else
 278              {
 279                  P1 = index_at_which_present << 4;
 280                  lcd_cmd(0x80); // Move cursor to first line
 281                  msdelay(4);
 282                  center_pad(pad9, display_msg1);
 283                  lcd_write_string(display_msg1);
 284              }
 285              while (1); */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1426    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =    108       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.7.0   Q1SCARLET                                                         04/08/2023 16:53:54 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
