C51 COMPILER V9.60.7.0   LAB8_Q3                                                           03/13/2023 15:18:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LAB8_Q3
OBJECT MODULE PLACED IN .\Objects\lab8_Q3.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lab8_Q3.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\l
                    -ab8_Q3.lst) TABS(2) OBJECT(.\Objects\lab8_Q3.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          #include <stdio.h>
   4          #include <string.h>
   5          // #include <reg51.h>
   6          sfr IE = 0xA8;
   7          #define MAX_LCD_CHARS 16 // Maximum characters per line on the LCD
   8          void center_pad(const unsigned char *str_to_pad, unsigned char lcd_str[MAX_LCD_CHARS + 1], unsigned char p
             -ad_char);
   9          sbit start_stop_pin = P1 ^ 0;    // P1.0 is used to start and stop event measurement
  10          sbit event_counter_pin = P3 ^ 4; // P3.4 is used as input to count the events
  11          
  12          unsigned char display_msg1[MAX_LCD_CHARS + 1];
  13          unsigned char display_msg2[MAX_LCD_CHARS + 1];
  14          unsigned int number_of_seconds = 0;
  15          unsigned int seconds = 0, minutes = 0;
  16          char display[5]={0};
  17          void timer0_isr() interrupt 1
  18          { // this interrupt if for timer 0
  19   1          number_of_seconds++;
  20   1         /*  TH0 = -60;
  21   1          TL0 = 0xFF; */
  22   1          TL0 = 0xC4;
  23   1          TH0 = 0xFF; 
  24   1          TR0=1;
  25   1          return;
  26   1      }
  27          void time()
  28          {
  29   1          lcd_cmd(0x80);
  30   1          msdelay(4);
  31   1          
  32   1          
  33   1          event_counter_pin = 1; // make it an input port
  34   1          start_stop_pin = 1;    // making it an input port
  35   1      
  36   1          // TMOD = 0x05; // timer 0 in mode 1 as a counter
  37   1          // IE = 0x82;   // enables interrup for timer 0
  38   1      
  39   1          // manual reset no auto reset
  40   1          while (!start_stop_pin)
  41   1          {
  42   2              msdelay(1);
  43   2          }
  44   1          TMOD = 0x05; // timer 0 in mode 1 as a counter
  45   1          IE = 0x82;   // enables interrup for timer 0
  46   1          
  47   1          TL0 = 0xC4;
  48   1          TH0 = 0xFF; // in 1s 60 falling edge will be detected;
  49   1          TR0 = 1;    // start timer
  50   1      
  51   1          while (start_stop_pin);
  52   1         //now display the content on lcd
  53   1         minutes=number_of_seconds / 60;
C51 COMPILER V9.60.7.0   LAB8_Q3                                                           03/13/2023 15:18:21 PAGE 2   

  54   1         seconds=number_of_seconds%60;
  55   1      //    sprintf(display_msg1, "%02d:%02d", minutes, seconds); 
  56   1      display[2]=':';
  57   1      display[0]=minutes/10 + '0';
  58   1      display[1]=minutes%10 + '0';
  59   1      display[3]=seconds/10 + '0';
  60   1      display[4]=seconds % 10 + '0';
  61   1      
  62   1      //    lcd_write_string(display_msg1);
  63   1        center_pad(display,display_msg1,32);
  64   1        lcd_write_string(display_msg1);  
  65   1      }
  66          void main()
  67          {
  68   1          lcd_init(); // Initialize LCD
  69   1          lcd_cmd(0x80);
  70   1          msdelay(4);
  71   1          while(1)
  72   1          {
  73   2              time();
  74   2          }
  75   1          
  76   1          /* event_counter_pin = 1; // make it an input port
  77   1          start_stop_pin = 1;    // making it an input port
  78   1      
  79   1          // TMOD = 0x05; // timer 0 in mode 1 as a counter
  80   1          // IE = 0x82;   // enables interrup for timer 0
  81   1      
  82   1          // manual reset no auto reset
  83   1          while (!start_stop_pin)
  84   1          {
  85   1              msdelay(1);
  86   1          }
  87   1          TMOD = 0x05; // timer 0 in mode 1 as a counter
  88   1          IE = 0x82;   // enables interrup for timer 0
  89   1          
  90   1          TL0 = 0xC4;
  91   1          TH0 = 0xFF; // in 1s 60 falling edge will be detected;
  92   1          TR0 = 1;    // start timer
  93   1      
  94   1          while (start_stop_pin);
  95   1         //now display the content on lcd
  96   1         minutes=number_of_seconds / 60;
  97   1         seconds=number_of_seconds%60;
  98   1      //    sprintf(display_msg1, "%02d:%02d", minutes, seconds); 
  99   1      display[2]=':';
 100   1      display[0]=minutes/10 + '0';
 101   1      display[1]=minutes%10 + '0';
 102   1      display[3]=seconds/10 + '0';
 103   1      display[4]=seconds % 10 + '0';
 104   1      
 105   1      //    lcd_write_string(display_msg1);
 106   1        center_pad(display,display_msg1,32);
 107   1        lcd_write_string(display_msg1); */
 108   1         while (1);
 109   1         
 110   1         
 111   1      }
 112          
 113          // Center pad a string with spaces on both sides to make it fit in MAX_LCD_CHARS
 114           
 115          void center_pad(const unsigned char *str_to_pad, unsigned char lcd_str[MAX_LCD_CHARS + 1], unsigned char p
C51 COMPILER V9.60.7.0   LAB8_Q3                                                           03/13/2023 15:18:21 PAGE 3   

             -ad_char)
 116          {
 117   1          size_t len = strlen(str_to_pad);
 118   1          size_t spaces = MAX_LCD_CHARS - len;
 119   1          size_t left_spaces = spaces / 2;
 120   1          size_t right_spaces = spaces - left_spaces;
 121   1          size_t i;
 122   1      
 123   1          // Pad the left side with spaces
 124   1          for (i = 0; i < left_spaces; i++)
 125   1          {
 126   2              lcd_str[i] = pad_char;
 127   2          }
 128   1      
 129   1          // Copy the input string into the center of the LCD string
 130   1          for (i = 0; i < len; i++)
 131   1          {
 132   2              lcd_str[left_spaces + i] = str_to_pad[i];
 133   2          }
 134   1      
 135   1          // Pad the right side with spaces
 136   1          for (i = left_spaces + len; i < MAX_LCD_CHARS; i++)
 137   1          {
 138   2              lcd_str[i] = pad_char;
 139   2          }
 140   1      
 141   1          // Add a null terminator to the end of the string
 142   1          lcd_str[MAX_LCD_CHARS] = '\0';
 143   1              return;
 144   1      }
 145           
 146          
 147          /* #include <at89c5131.h>
 148          #include "lcd.h"
 149          #include <string.h>
 150          
 151          #define MAX_LCD_CHARS 16 // Maximum characters per line on the LCD
 152          
 153          unsigned char display_msg1[MAX_LCD_CHARS + 1];
 154          unsigned char display_msg2[MAX_LCD_CHARS + 1];
 155          
 156          void center_pad(const unsigned char *str_to_pad, unsigned char lcd_str[MAX_LCD_CHARS + 1], unsigned char p
             -ad_char);
 157          
 158          
 159          
 160          
 161          void main()
 162          {
 163          
 164              lcd_init();
 165              lcd_cmd(0x80);                          //Move cursor to first line
 166              msdelay(4);
 167          }
 168          
 169          void center_pad(const unsigned char *str_to_pad, unsigned char lcd_str[MAX_LCD_CHARS + 1], unsigned char p
             -ad_char)
 170          {
 171              size_t len = strlen(str_to_pad);
 172              size_t spaces = MAX_LCD_CHARS - len;
 173              size_t left_spaces = spaces / 2;
 174              size_t right_spaces = spaces - left_spaces;
C51 COMPILER V9.60.7.0   LAB8_Q3                                                           03/13/2023 15:18:21 PAGE 4   

 175              size_t i;
 176          
 177              // Pad the left side with spaces
 178              for (i = 0; i < left_spaces; i++)
 179              {
 180                  lcd_str[i] = pad_char;
 181              }
 182          
 183              // Copy the input string into the center of the LCD string
 184              for (i = 0; i < len; i++)
 185              {
 186                  lcd_str[left_spaces + i] = str_to_pad[i];
 187              }
 188          
 189              // Pad the right side with spaces
 190              for (i = left_spaces + len; i < MAX_LCD_CHARS; i++)
 191              {
 192                  lcd_str[i] = pad_char;
 193              }
 194          
 195              // Add a null terminator to the end of the string
 196              lcd_str[MAX_LCD_CHARS] = '\0';
 197          } */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    581    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
